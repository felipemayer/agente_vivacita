#!/usr/bin/env python3
"""
H√≠gia Enhanced - Assistente Virtual da Cl√≠nica Vivacit√† com Integra√ß√£o MCP
Vers√£o aprimorada com VivacitaMCPTool para agendamentos m√©dicos inteligentes
"""

from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from crewai import Agent, Task, Crew
from langchain_openai import ChatOpenAI

from src.core.config import settings
from src.core.logging import get_logger
from src.tools.vivacita_mcp_tool import VivacitaMCPTool, create_vivacita_tool
from src.knowledge.vivacita_clinic_kb import vivacita_kb

logger = get_logger(__name__)

class HigiaEnhancedAgent:
    """
    H√≠gia Enhanced - Assistente Virtual da Cl√≠nica Vivacit√† com MCP Integration
    
    Nova vers√£o com:
    - Integra√ß√£o VivacitaMCPTool para agendamentos reais
    - Base de conhecimento atualizada com especialidades reais
    - Valida√ß√£o inteligente de regras da cl√≠nica
    - Suporte completo √†s capacidades especiais do Dr. Ernesto
    """
    
    def __init__(self):
        """Initialize enhanced H√≠gia agent with MCP integration."""
        
        # Initialize LLM (using OpenAI for now, can switch to OpenRouter later)
        self.llm = ChatOpenAI(
            api_key=settings.OPENAI_API_KEY,
            model="gpt-3.5-turbo",
            temperature=0.7,
            max_tokens=4000
        )
        
        # Initialize MCP tool
        self.vivacita_tool = create_vivacita_tool()
        
        # Initialize knowledge base
        self.kb = vivacita_kb
        
        # Create enhanced H√≠gia agent
        self.higia = Agent(
            role='Assistente Virtual H√≠gia - Especialista em Sa√∫de Mental da Cl√≠nica Vivacit√†',
            goal='''Sou H√≠gia, assistente virtual da Cl√≠nica Vivacit√† Sa√∫de Mental.
            Minha miss√£o √© proporcionar atendimento humanizado, emp√°tico e eficiente,
            priorizando o bem-estar dos pacientes e facilitando agendamentos m√©dicos.''',
            
            backstory=f'''Sou H√≠gia, nomeada em honra √† deusa grega da sa√∫de.
            Trabalho na Cl√≠nica Vivacit√† Sa√∫de Mental como assistente virtual especializada.
            
            PERSONALIDADE:
            - Educada, respeitosa e emp√°tica
            - Tom feminino, suave e acolhedor
            - Formal mas pr√≥xima, uso "voc√™" (nunca "tu")
            - Linguagem natural e conversacional
            - Tranquilizadora em situa√ß√µes de ansiedade
            
            CONHECIMENTO ATUALIZADO DA CL√çNICA:
            {self.kb.get_clinic_summary()}
            
            REGRAS FUNDAMENTAIS:
            1. SEMPRE usar a ferramenta vivacita_scheduler para consultas m√©dicas
            2. Dr. Ernesto √© √öNICO para: crian√ßas 7+, consultas online, relat√≥rios
            3. Hor√°rios online fixos: 11:45, 17:00, 17:15 (apenas Dr. Ernesto)
            4. Validar idade antes de agendar (m√≠nimo 7 anos)
            5. Para emerg√™ncias: encaminhar para atendimento especializado
            6. Coletar dados completos antes de finalizar agendamentos
            
            FLUXO DE AGENDAMENTO INTELIGENTE:
            1. Identificar necessidade e validar elegibilidade
            2. Determinar m√©dico adequado pelas regras da cl√≠nica
            3. Verificar disponibilidade real usando a ferramenta
            4. Coletar dados do paciente
            5. Validar agendamento antes de confirmar
            6. Orientar paciente sobre prepara√ß√£o e comparecimento
            ''',
            
            verbose=True,
            allow_delegation=False,
            llm=self.llm,
            tools=[self.vivacita_tool]
        )
    
    async def process_message(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Process incoming message with enhanced MCP integration.
        
        Args:
            context: Message context with routing information
            
        Returns:
            Processing result with response and metadata
        """
        message = context.get("message", "")
        phone = context.get("phone", "")
        name = context.get("name", "")
        routing_result = context.get("routing_result", {})
        
        logger.info(
            "H√≠gia Enhanced processing message",
            phone=phone,
            workflow=routing_result.get("workflow", "general"),
            priority=routing_result.get("priority", "normal")
        )
        
        try:
            # Create intelligent task description
            task_description = self._create_enhanced_task_description(
                message, routing_result, name, phone
            )
            
            # Create the task for H√≠gia
            task = Task(
                description=task_description,
                expected_output="Resposta emp√°tica, profissional e completa seguindo as diretrizes da H√≠gia Enhanced",
                agent=self.higia
            )
            
            # Create crew with enhanced agent
            crew = Crew(
                agents=[self.higia],
                tasks=[task],
                verbose=False  # Reduced verbosity for cleaner logs
            )
            
            # Execute with performance tracking
            start_time = datetime.utcnow()
            result = crew.kickoff()
            processing_time = (datetime.utcnow() - start_time).total_seconds()
            
            # Enhanced escalation logic
            escalate = self._enhanced_escalation_check(message, routing_result, str(result))
            
            return {
                "status": "success",
                "response": str(result),
                "escalate": escalate,
                "processing_time": processing_time,
                "agent_used": "higia_enhanced",
                "workflow": routing_result.get("workflow", "general"),
                "priority": routing_result.get("priority", "normal"),
                "mcp_integration": True,
                "knowledge_base": "vivacita_real_specialties"
            }
            
        except Exception as e:
            logger.error(
                "Error in H√≠gia Enhanced processing",
                phone=phone,
                error=str(e),
                exc_info=True
            )
            
            return {
                "status": "error",
                "response": self._get_enhanced_fallback_response(name),
                "escalate": True,
                "error": str(e),
                "agent_used": "higia_enhanced"
            }
    
    def _create_enhanced_task_description(
        self, 
        message: str, 
        routing_result: Dict[str, Any], 
        name: str = "", 
        phone: str = ""
    ) -> str:
        """Create enhanced task description with MCP integration context."""
        
        workflow = routing_result.get("workflow", "general")
        priority = routing_result.get("priority", "normal")
        current_time = datetime.now()
        
        # Base context with enhanced information
        base_context = f"""
        CONTEXTO H√çGIA ENHANCED:
        Data/Hora atual: {current_time.strftime('%d/%m/%Y %H:%M')}
        Paciente: {name or 'N√£o informado'}
        Telefone: {phone or 'N√£o informado'}
        Workflow detectado: {workflow}
        Prioridade: {priority}
        
        MENSAGEM DO PACIENTE: "{message}"
        
        FERRAMENTA DISPON√çVEL:
        - vivacita_scheduler: Sistema completo de agendamento m√©dico
        
        IMPORTANTE: Use SEMPRE a ferramenta vivacita_scheduler para:
        - Consultar especialidades: vivacita_scheduler(action="get_specialties")
        - Informa√ß√µes Dr. Ernesto: vivacita_scheduler(action="get_dr_ernesto")
        - Verificar disponibilidade: vivacita_scheduler(action="check_availability")
        - Validar agendamento: vivacita_scheduler(action="validate_appointment")
        - Consultar pre√ßos: vivacita_scheduler(action="get_prices")
        - Verificar elegibilidade crian√ßa: vivacita_scheduler(action="check_child_eligibility", age=X)
        - Op√ß√µes online: vivacita_scheduler(action="get_online_options")
        """
        
        # Emergency handling
        if priority == "high" or workflow == "emergency_escalation":
            return base_context + """
            üö® SITUA√á√ÉO DE EMERG√äNCIA DETECTADA!
            
            A√á√ÉO IMEDIATA:
            1. Responda com m√°xima empatia e urg√™ncia
            2. Reconhe√ßa a situa√ß√£o com seriedade
            3. Oriente para buscar ajuda m√©dica imediata
            4. Forne√ßa contatos de emerg√™ncia:
               - SAMU: 192
               - CVV: 188 (24h)
               - Emerg√™ncia psiqui√°trica mais pr√≥xima
            5. Tranquilize mas seja firme na orienta√ß√£o
            6. Escale IMEDIATAMENTE para equipe m√©dica
            
            LINGUAGEM: Emp√°tica, tranquilizadora, mas com urg√™ncia apropriada.
            N√ÉO minimize a situa√ß√£o, ofere√ßa suporte real e imediato.
            """
        
        # Appointment booking workflow
        elif workflow in ["appointment_booking", "appointment_confirmation", "appointment_rescheduling"]:
            return base_context + """
            üìÖ AGENDAMENTO M√âDICO INTELIGENTE
            
            FLUXO OBRIGAT√ìRIO - Use as ferramentas nesta ordem:
            
            1. PRIMEIRO: Identifique a necessidade
               - Especialidade desejada
               - Idade do paciente (cr√≠tico para valida√ß√£o)
               - Prefer√™ncia de modalidade (presencial/online)
               - Tipo especial (relat√≥rio, consulta crian√ßa)
            
            2. VALIDA√á√ÉO: vivacita_scheduler(action="validate_appointment", patient_age=X, specialty="Y", modality="Z")
            
            3. INFORMA√á√ïES: 
               - Para Dr. Ernesto: vivacita_scheduler(action="get_dr_ernesto")
               - Para pre√ßos: vivacita_scheduler(action="get_prices")
               - Para crian√ßa: vivacita_scheduler(action="check_child_eligibility", age=X)
               - Para online: vivacita_scheduler(action="get_online_options")
            
            4. DISPONIBILIDADE: vivacita_scheduler(action="check_availability", doctor_id=X, date="YYYY-MM-DD")
            
            5. COLETA DE DADOS (se tudo OK):
               "Para prosseguir com seu agendamento, preciso dos seguintes dados:
               ‚û°Ô∏è Nome completo
               ‚û°Ô∏è Data de nascimento
               ‚û°Ô∏è CPF
               ‚û°Ô∏è Telefone
               ‚û°Ô∏è Email
               ‚û°Ô∏è Endere√ßo completo com CEP
               ‚û°Ô∏è Conv√™nio (se houver)
               ‚û°Ô∏è Foto do documento e carteirinha (se conv√™nio)"
            
            REGRAS CR√çTICAS:
            - Crian√ßas 7-17 anos: APENAS Dr. Ernesto
            - Consultas online: APENAS Dr. Ernesto (11:45, 17:00, 17:15)
            - Relat√≥rios m√©dicos: APENAS Dr. Ernesto
            - Idade m√≠nima: 7 anos
            - Hor√°rio m√≠nimo hoje: +2 horas da hora atual
            
            LINGUAGEM: Profissional, clara, acolhedora. Explique as regras especiais quando aplic√°veis.
            """
        
        # General medical consultation
        else:
            return base_context + """
            üí¨ CONSULTA M√âDICA GERAL E INFORMA√á√ïES
            
            ABORDAGEM INTELIGENTE:
            
            1. Para perguntas sobre especialidades:
               vivacita_scheduler(action="get_specialties")
            
            2. Para informa√ß√µes sobre a cl√≠nica:
               vivacita_scheduler(action="get_clinic_info")
            
            3. Para quest√µes de pre√ßos:
               vivacita_scheduler(action="get_prices")
            
            4. Para perguntas sobre Dr. Ernesto:
               vivacita_scheduler(action="get_dr_ernesto")
            
            5. Para consultas online:
               vivacita_scheduler(action="get_online_options")
            
            ORIENTA√á√ïES GERAIS:
            - Seja emp√°tica e acolhedora
            - Forne√ßa informa√ß√µes precisas usando as ferramentas
            - Explique claramente as op√ß√µes dispon√≠veis
            - Oriente sobre pr√≥ximos passos quando apropriado
            - Para situa√ß√µes complexas, ofere√ßa transferir para atendente humano
            
            ESPECIALIDADES DISPON√çVEIS:
            - Psiquiatria (R$ 500,00)
            - Psicologia (R$ 250,00 particular / R$ 150,00 Bradesco)
            - Neuropsicologia (R$ 1.950,00)
            - Exames diversos
            - Polissonografia (exame do sono)
            
            HOR√ÅRIO DA CL√çNICA: Segunda a Sexta, 08:00-18:00
            
            LINGUAGEM: Natural, informativa, tranquilizadora, sempre profissional.
            """
    
    def _enhanced_escalation_check(
        self, 
        message: str, 
        routing_result: Dict[str, Any], 
        response: str
    ) -> bool:
        """Enhanced escalation logic with multiple criteria."""
        
        # Emergency situations always escalate
        if routing_result.get("priority") == "high":
            logger.warning("Escalating due to high priority routing")
            return True
        
        # Enhanced emergency keywords
        emergency_keywords = [
            "suic√≠dio", "suicidio", "desespero", "autoles√£o", "autolesao",
            "n√£o aguento mais", "nao aguento mais", "acabar com tudo",
            "me matar", "morrer", "n√£o vale a pena", "nao vale a pena",
            "sem sa√≠da", "sem saida", "n√£o tem jeito", "nao tem jeito",
            "vou me matar", "quero morrer", "penso em morrer"
        ]
        
        message_lower = message.lower()
        for keyword in emergency_keywords:
            if keyword in message_lower:
                logger.warning(f"Escalating due to emergency keyword: {keyword}")
                return True
        
        # Complex situation indicators
        complex_indicators = [
            "n√£o entendi", "nao entendi", "confuso", "n√£o ficou claro",
            "preciso falar com algu√©m", "quero falar com atendente",
            "isso n√£o resolve", "isso nao resolve", "muito complicado"
        ]
        
        for indicator in complex_indicators:
            if indicator in message_lower:
                logger.info(f"Escalating due to complexity indicator: {indicator}")
                return True
        
        # Check if response contains error indicators
        error_indicators = ["erro", "problema", "n√£o foi poss√≠vel", "nao foi possivel"]
        response_lower = response.lower()
        for indicator in error_indicators:
            if indicator in response_lower:
                logger.info(f"Escalating due to response error indicator: {indicator}")
                return True
        
        return False
    
    def _get_enhanced_fallback_response(self, name: str = "") -> str:
        """Enhanced fallback response with personalization."""
        greeting = f"Ol√° {name}! " if name else "Ol√°! "
        
        return f"""{greeting}Pe√ßo desculpas, mas estou enfrentando algumas dificuldades t√©cnicas no momento.
        
        Para garantir que voc√™ receba o melhor atendimento poss√≠vel, vou transferir voc√™ para um de nossos atendentes especializados que poder√° ajud√°-lo imediatamente.
        
        N√£o se preocupe, estamos aqui para cuidar do seu bem-estar e resolver sua necessidade da melhor forma poss√≠vel.
        
        Aguarde um momento, por favor. üíô
        
        --- H√≠gia Enhanced ---
        Cl√≠nica Vivacit√† Sa√∫de Mental"""

    def test_mcp_integration(self) -> Dict[str, Any]:
        """Test MCP tool integration for validation."""
        
        test_results = {
            "tool_loaded": False,
            "specialties_test": False,
            "dr_ernesto_test": False,
            "validation_test": False,
            "errors": []
        }
        
        try:
            # Test 1: Tool loading
            if self.vivacita_tool:
                test_results["tool_loaded"] = True
                logger.info("‚úÖ VivacitaMCPTool loaded successfully")
            
            # Test 2: Get specialties
            specialties_result = self.vivacita_tool._run("get_specialties")
            if "PSIQUIATRA" in specialties_result:
                test_results["specialties_test"] = True
                logger.info("‚úÖ Specialties retrieval working")
            
            # Test 3: Dr. Ernesto info
            ernesto_result = self.vivacita_tool._run("get_dr_ernesto")
            if "ERNESTO" in ernesto_result:
                test_results["dr_ernesto_test"] = True
                logger.info("‚úÖ Dr. Ernesto info retrieval working")
            
            # Test 4: Validation
            validation_result = self.vivacita_tool._run(
                "validate_appointment", 
                patient_age=10, 
                specialty="PSIQUIATRA", 
                modality="presencial"
            )
            if "valid" in validation_result:
                test_results["validation_test"] = True
                logger.info("‚úÖ Appointment validation working")
                
        except Exception as e:
            error_msg = f"MCP integration test error: {str(e)}"
            test_results["errors"].append(error_msg)
            logger.error(error_msg)
        
        return test_results

# Factory function for easy instantiation
def create_higia_enhanced() -> HigiaEnhancedAgent:
    """Create and return enhanced H√≠gia agent instance."""
    return HigiaEnhancedAgent()

# Test integration when run directly
if __name__ == "__main__":
    print("üöÄ Testing H√≠gia Enhanced with MCP Integration...")
    
    higia = create_higia_enhanced()
    test_results = higia.test_mcp_integration()
    
    print(f"Test Results: {test_results}")
    
    if all([test_results["tool_loaded"], test_results["specialties_test"], 
            test_results["dr_ernesto_test"], test_results["validation_test"]]):
        print("‚úÖ All MCP integration tests passed!")
    else:
        print("‚ö†Ô∏è Some MCP integration tests failed.")
        if test_results["errors"]:
            print(f"Errors: {test_results['errors']}")