#!/usr/bin/env python3
"""
Teste Completo da Integra√ß√£o MCP - Sistema Vivacit√†
Valida toda a cadeia: VivacitaMCPTool ‚Üí H√≠gia Enhanced ‚Üí Resposta Inteligente
"""

import os
import sys
import asyncio
import json
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_vivacita_mcp_tool():
    """Testa a VivacitaMCPTool isoladamente"""
    print("üß™ Testando VivacitaMCPTool...")
    
    try:
        from src.tools.vivacita_mcp_tool import VivacitaMCPTool
        
        tool = VivacitaMCPTool()
        
        # Teste 1: Especialidades
        print("\n1. Testando get_specialties:")
        result = tool._run("get_specialties")
        specialties_data = json.loads(result)
        print(f"‚úÖ Especialidades encontradas: {len(specialties_data.get('specialties', []))}")
        
        # Teste 2: Dr. Ernesto
        print("\n2. Testando get_dr_ernesto:")
        result = tool._run("get_dr_ernesto")
        ernesto_data = json.loads(result)
        print(f"‚úÖ Dr. Ernesto: {ernesto_data['doctor']['name']}")
        print(f"   Capacidades especiais: {len(ernesto_data['doctor']['special_capabilities'])}")
        
        # Teste 3: Valida√ß√£o para crian√ßa
        print("\n3. Testando valida√ß√£o para crian√ßa:")
        result = tool._run("validate_appointment", patient_age=10, specialty="PSIQUIATRA", modality="presencial")
        validation_data = json.loads(result)
        print(f"‚úÖ Valida√ß√£o crian√ßa: {validation_data['validation']['valid']}")
        
        # Teste 4: Valida√ß√£o consulta online
        print("\n4. Testando valida√ß√£o consulta online:")
        result = tool._run("validate_appointment", patient_age=25, specialty="PSIQUIATRA", modality="online", doctor_id=3)
        validation_data = json.loads(result)
        print(f"‚úÖ Valida√ß√£o online (m√©dico errado): {validation_data['validation']['valid']}")
        print(f"   Erros detectados: {len(validation_data['validation']['errors'])}")
        
        # Teste 5: Pre√ßos
        print("\n5. Testando get_prices:")
        result = tool._run("get_prices")
        prices_data = json.loads(result)
        print(f"‚úÖ Pre√ßos carregados: {len(prices_data.get('prices', {}))}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste VivacitaMCPTool: {e}")
        return False

def test_knowledge_base():
    """Testa a base de conhecimento atualizada"""
    print("\nüß™ Testando Knowledge Base...")
    
    try:
        from src.knowledge.vivacita_clinic_kb import vivacita_kb
        
        # Teste 1: Informa√ß√µes da cl√≠nica
        print("\n1. Testando informa√ß√µes gerais:")
        clinic_info = vivacita_kb.clinic_info
        print(f"‚úÖ Nome da cl√≠nica: {clinic_info['name']}")
        print(f"   Especialidades: {len(clinic_info.get('specialties', []))}")
        
        # Teste 2: Dr. Ernesto
        print("\n2. Testando Dr. Ernesto:")
        dr_info = vivacita_kb.get_dr_ernesto_info()
        print(f"‚úÖ Dr. Ernesto: {dr_info['name']}")
        print(f"   Idade m√≠nima crian√ßas: {dr_info['min_child_age']}")
        print(f"   Hor√°rios online: {dr_info['online_slots']}")
        
        # Teste 3: Valida√ß√£o de idade
        print("\n3. Testando valida√ß√£o de idade:")
        child_validation = vivacita_kb.validate_age_requirement(8, "PSIQUIATRA")
        adult_validation = vivacita_kb.validate_age_requirement(25, "PSIQUIATRA")
        print(f"‚úÖ Crian√ßa 8 anos v√°lida: {child_validation['valid']}")
        print(f"‚úÖ Adulto 25 anos v√°lido: {adult_validation['valid']}")
        
        # Teste 4: Especialidades
        print("\n4. Testando especialidades:")
        psiquiatria = vivacita_kb.get_specialty_info("PSIQUIATRA")
        psicologia = vivacita_kb.get_specialty_info("PSICOLOGIA")
        print(f"‚úÖ Psiquiatria: {psiquiatria.get('name', 'N√£o encontrado')}")
        print(f"‚úÖ Psicologia: {psicologia.get('name', 'N√£o encontrado')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste Knowledge Base: {e}")
        return False

async def test_higia_enhanced():
    """Testa o agente H√≠gia Enhanced com integra√ß√£o MCP"""
    print("\nüß™ Testando H√≠gia Enhanced...")
    
    try:
        from src.agents.higia_enhanced import HigiaEnhancedAgent
        
        higia = HigiaEnhancedAgent()
        
        # Teste 1: MCP Integration b√°sica
        print("\n1. Testando integra√ß√£o MCP:")
        mcp_test = higia.test_mcp_integration()
        print(f"‚úÖ MCP Tool carregado: {mcp_test['tool_loaded']}")
        print(f"‚úÖ Teste especialidades: {mcp_test['specialties_test']}")
        print(f"‚úÖ Teste Dr. Ernesto: {mcp_test['dr_ernesto_test']}")
        print(f"‚úÖ Teste valida√ß√£o: {mcp_test['validation_test']}")
        
        if mcp_test['errors']:
            print(f"‚ö†Ô∏è Erros encontrados: {mcp_test['errors']}")
        
        # Teste 2: Processamento de mensagem - Agendamento crian√ßa
        print("\n2. Testando agendamento para crian√ßa:")
        context = {
            "message": "Ol√°! Preciso agendar uma consulta psiqui√°trica para minha filha de 9 anos.",
            "phone": "11999999999",
            "name": "Maria Silva",
            "routing_result": {
                "workflow": "appointment_booking",
                "priority": "normal",
                "confidence": 0.85
            }
        }
        
        result = await higia.process_message(context)
        print(f"‚úÖ Status: {result['status']}")
        print(f"   Tempo processamento: {result.get('processing_time', 0):.2f}s")
        print(f"   Escala√ß√£o necess√°ria: {result.get('escalate', False)}")
        print(f"   Resposta (primeiros 200 chars): {result['response'][:200]}...")
        
        # Teste 3: Processamento de mensagem - Consulta online
        print("\n3. Testando consulta online:")
        context = {
            "message": "Gostaria de saber sobre consultas online. √â poss√≠vel?",
            "phone": "11888888888",
            "name": "Jo√£o Santos",
            "routing_result": {
                "workflow": "medical_consultation",
                "priority": "normal",
                "confidence": 0.75
            }
        }
        
        result = await higia.process_message(context)
        print(f"‚úÖ Status: {result['status']}")
        print(f"   Resposta cont√©m 'Ernesto': {'Ernesto' in result['response']}")
        print(f"   Resposta cont√©m hor√°rios: {'11:45' in result['response'] or '17:00' in result['response']}")
        
        # Teste 4: Situa√ß√£o de emerg√™ncia
        print("\n4. Testando detec√ß√£o de emerg√™ncia:")
        context = {
            "message": "N√£o aguento mais, estou pensando em suic√≠dio",
            "phone": "11777777777",
            "name": "Paciente Emerg√™ncia",
            "routing_result": {
                "workflow": "emergency_escalation",
                "priority": "high",
                "confidence": 0.95
            }
        }
        
        result = await higia.process_message(context)
        print(f"‚úÖ Status: {result['status']}")
        print(f"   Escala√ß√£o autom√°tica: {result.get('escalate', False)}")
        print(f"   Resposta cont√©m SAMU: {'192' in result['response']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste H√≠gia Enhanced: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_end_to_end_workflow():
    """Teste completo end-to-end do fluxo de agendamento"""
    print("\nüß™ Testando fluxo completo end-to-end...")
    
    try:
        from src.core.routing.webhook_router import WebhookRouter
        from src.agents.higia_enhanced import HigiaEnhancedAgent
        
        # Inicializar componentes
        router = WebhookRouter()
        higia = HigiaEnhancedAgent()
        
        # Cen√°rio: M√£e quer agendar para filho de 12 anos
        test_message = "Oi! Minha rede social me indicou voc√™s. Preciso agendar uma consulta psiqui√°trica para meu filho de 12 anos. Ele est√° com problemas de ansiedade na escola."
        
        print(f"\nüì± Mensagem recebida: {test_message}")
        
        # Passo 1: Roteamento inteligente
        routing_result = router.route_message(test_message)
        print(f"\nüìç Roteamento:")
        print(f"   Workflow: {routing_result['workflow']}")
        print(f"   Confian√ßa: {routing_result['confidence']:.2f}")
        print(f"   Prioridade: {routing_result.get('priority', 'normal')}")
        
        # Passo 2: Processamento com H√≠gia Enhanced
        context = {
            "message": test_message,
            "phone": "11987654321",
            "name": "Ana Pereira",
            "routing_result": routing_result
        }
        
        print(f"\nü§ñ Processando com H√≠gia Enhanced...")
        result = await higia.process_message(context)
        
        print(f"\nüìã Resultado final:")
        print(f"   Status: {result['status']}")
        print(f"   Agente usado: {result.get('agent_used', 'unknown')}")
        print(f"   Integra√ß√£o MCP: {result.get('mcp_integration', False)}")
        print(f"   Tempo processamento: {result.get('processing_time', 0):.2f}s")
        print(f"   Escala√ß√£o: {result.get('escalate', False)}")
        
        print(f"\nüí¨ Resposta da H√≠gia:")
        print(f"{result['response']}")
        
        # Valida√ß√µes do teste end-to-end
        validations = {
            "roteamento_correto": routing_result['workflow'] == 'appointment_booking',
            "confianca_alta": routing_result['confidence'] > 0.7,
            "processamento_sucesso": result['status'] == 'success',
            "menciona_ernesto": 'Ernesto' in result['response'] or 'ernesto' in result['response'].lower(),
            "menciona_crianca": any(word in result['response'].lower() for word in ['crian√ßa', 'menor', '12 anos', 'filho']),
            "tempo_razoavel": result.get('processing_time', 999) < 30
        }
        
        print(f"\n‚úÖ Valida√ß√µes do fluxo:")
        for validation, passed in validations.items():
            status = "‚úÖ" if passed else "‚ùå"
            print(f"   {status} {validation}: {passed}")
        
        success_count = sum(validations.values())
        total_count = len(validations)
        
        print(f"\nüìä Score final: {success_count}/{total_count} valida√ß√µes passou")
        
        return success_count >= (total_count * 0.8)  # 80% de sucesso
        
    except Exception as e:
        print(f"‚ùå Erro no teste end-to-end: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Executa todos os testes de integra√ß√£o MCP"""
    print("üöÄ TESTE COMPLETO DA INTEGRA√á√ÉO MCP - Sistema Vivacit√†")
    print("=" * 70)
    
    tests = [
        ("VivacitaMCPTool", test_vivacita_mcp_tool()),
        ("Knowledge Base", test_knowledge_base()),
        ("H√≠gia Enhanced", await test_higia_enhanced()),
        ("End-to-End Workflow", await test_end_to_end_workflow())
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, result in tests:
        if result:
            passed += 1
            print(f"\n‚úÖ {test_name}: PASSOU")
        else:
            print(f"\n‚ùå {test_name}: FALHOU")
    
    print("\n" + "=" * 70)
    print(f"üìä RESULTADO FINAL: {passed}/{total} testes passaram")
    
    if passed >= 3:  # Pelo menos 3/4 testes devem passar
        print("\nüéâ INTEGRA√á√ÉO MCP VALIDADA COM SUCESSO!")
        print("\nüìã FUNCIONALIDADES TESTADAS E APROVADAS:")
        print("‚úÖ VivacitaMCPTool com base de dados real da cl√≠nica")
        print("‚úÖ Knowledge Base atualizada com especialidades corretas")
        print("‚úÖ H√≠gia Enhanced com integra√ß√£o MCP completa")
        print("‚úÖ Valida√ß√£o de regras especiais do Dr. Ernesto")
        print("‚úÖ Fluxo end-to-end de agendamento inteligente")
        print("‚úÖ Detec√ß√£o e valida√ß√£o de consultas para crian√ßas")
        print("‚úÖ Sistema de consultas online com hor√°rios fixos")
        
        print("\nüöÄ PR√ìXIMOS PASSOS RECOMENDADOS:")
        print("1. Integrar H√≠gia Enhanced no sistema principal")
        print("2. Configurar ambiente de produ√ß√£o com credenciais reais")
        print("3. Implementar logging e monitoramento avan√ßado")
        print("4. Teste com usu√°rios reais da cl√≠nica")
        print("5. Expans√£o para outras funcionalidades MCP")
        
        return True
    else:
        print("\n‚ö†Ô∏è ALGUNS TESTES CR√çTICOS FALHARAM")
        print("üîß Verifique as configura√ß√µes e depend√™ncias antes de usar em produ√ß√£o")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)